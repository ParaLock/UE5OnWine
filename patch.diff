diff --git a/Engine/Build/BatchFiles/Build.bat b/Engine/Build/BatchFiles/Build.bat
index 9da38f1432d7..ed9caf82e20d 100755
--- a/Engine/Build/BatchFiles/Build.bat
+++ b/Engine/Build/BatchFiles/Build.bat
@@ -47,7 +47,7 @@ if not exist %UBTPath% (
 		if errorlevel 1 goto Error_UBTCompileFailed
 	) else (
 		echo Building UnrealBuildTool with dotnet...
-		dotnet build %ProjectFile% -c Development -v quiet
+		dotnet build %ProjectFile% -c Development -v quiet -maxCpuCount:1
 		if errorlevel 1 goto Error_UBTCompileFailed
 	)
 )
diff --git a/Engine/Build/BatchFiles/BuildUAT.bat b/Engine/Build/BatchFiles/BuildUAT.bat
index b67bd97a40f4..0c9179692506 100755
--- a/Engine/Build/BatchFiles/BuildUAT.bat
+++ b/Engine/Build/BatchFiles/BuildUAT.bat
@@ -89,7 +89,7 @@ call "%~dp0GetDotnetPath.bat"
 if errorlevel 1 goto Error_NoDotnetSDK
 
 echo Building AutomationTool...
-dotnet build Programs\AutomationTool\AutomationTool.csproj -c Development -v %MSBUILD_LOGLEVEL%
+dotnet build Programs\AutomationTool\AutomationTool.csproj -c Development -v %MSBUILD_LOGLEVEL% -maxCpuCount:1
 if errorlevel 1 goto Error_UATCompileFailed
 
 rem record input files - regardless of how we got here, these are now our point of reference
diff --git a/Engine/Build/BatchFiles/BuildUBT.bat b/Engine/Build/BatchFiles/BuildUBT.bat
index 01fec6f3be7e..4beb9dfbb5a2 100755
--- a/Engine/Build/BatchFiles/BuildUBT.bat
+++ b/Engine/Build/BatchFiles/BuildUBT.bat
@@ -83,7 +83,7 @@ call "%~dp0GetDotnetPath.bat"
 if errorlevel 1 goto Error_NoDotnetSDK
 
 echo Building UnrealBuildTool...
-dotnet build Programs\UnrealBuildTool\UnrealBuildTool.csproj -c Development -v %MSBUILD_LOGLEVEL%
+dotnet build Programs\UnrealBuildTool\UnrealBuildTool.csproj -c Development -v %MSBUILD_LOGLEVEL% -maxCpuCount:1
 if errorlevel 1 goto Error_UBTCompileFailed
 
 rem record input files - regardless of how we got here, these are now our point of reference
diff --git a/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/Source/VisualStudioCodeSourceCodeAccess/Private/VisualStudioCodeSourceCodeAccessModule.cpp b/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/Source/VisualStudioCodeSourceCodeAccess/Private/VisualStudioCodeSourceCodeAccessModule.cpp
index d0522c0184e8..c0497f7c7a24 100644
--- a/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/Source/VisualStudioCodeSourceCodeAccess/Private/VisualStudioCodeSourceCodeAccessModule.cpp
+++ b/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/Source/VisualStudioCodeSourceCodeAccess/Private/VisualStudioCodeSourceCodeAccessModule.cpp
@@ -22,6 +22,7 @@ void FVisualStudioCodeSourceCodeAccessModule::StartupModule()
 	LLM_SCOPE_BYTAG(VisualStudioCodeSourceCodeAccess);
 
 	VisualStudioCodeSourceCodeAccessor->Startup();
+	UE_LOG(LogTemp, Warning, TEXT("Loading visual studio code plugin..."));
 
 	// Bind our source control provider to the editor
 	IModularFeatures::Get().RegisterModularFeature(TEXT("SourceCodeAccessor"), &VisualStudioCodeSourceCodeAccessor.Get() );
diff --git a/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/Source/VisualStudioCodeSourceCodeAccess/Private/VisualStudioCodeSourceCodeAccessor.cpp b/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/Source/VisualStudioCodeSourceCodeAccess/Private/VisualStudioCodeSourceCodeAccessor.cpp
index dbee6504fa68..cb7a22056cc9 100644
--- a/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/Source/VisualStudioCodeSourceCodeAccess/Private/VisualStudioCodeSourceCodeAccessor.cpp
+++ b/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/Source/VisualStudioCodeSourceCodeAccess/Private/VisualStudioCodeSourceCodeAccessor.cpp
@@ -63,11 +63,15 @@ void FVisualStudioCodeSourceCodeAccessor::Startup()
 
 void FVisualStudioCodeSourceCodeAccessor::RefreshAvailability()
 {
+
+	UE_LOG(LogTemp, Warning, TEXT("Refreshing availablility."));
+
 #if PLATFORM_WINDOWS
 	FString IDEPath;
 
 	if (!FWindowsPlatformMisc::QueryRegKey(HKEY_CURRENT_USER, TEXT("SOFTWARE\\Classes\\Applications\\Code.exe\\shell\\open\\command\\"), TEXT(""), IDEPath))
 	{
+		UE_LOG(LogTemp, Warning, TEXT("Failed to get reg key"));
 		FWindowsPlatformMisc::QueryRegKey(HKEY_LOCAL_MACHINE, TEXT("SOFTWARE\\Classes\\Applications\\Code.exe\\shell\\open\\command\\"), TEXT(""), IDEPath);
 	}
 
@@ -76,9 +80,12 @@ void FVisualStudioCodeSourceCodeAccessor::RefreshAvailability()
 	FRegexMatcher Matcher(Pattern, IDEPath);
 	if (Matcher.FindNext())
 	{
+		UE_LOG(LogTemp, Warning, TEXT("Matched pattern!"));
 		FString URL = Matcher.GetCaptureGroup(1);
+		UE_LOG(LogTemp, Warning, TEXT("%s"), *URL);
 		if (FPaths::FileExists(URL))
 		{
+			UE_LOG(LogTemp, Warning, TEXT("found %s"), *URL);
 			Location.URL = URL;
 		}
 	}
diff --git a/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/VisualStudioCodeSourceCodeAccess.uplugin b/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/VisualStudioCodeSourceCodeAccess.uplugin
index 5a28cf0212e0..28883960e3f6 100644
--- a/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/VisualStudioCodeSourceCodeAccess.uplugin
+++ b/Engine/Plugins/Developer/VisualStudioCodeSourceCodeAccess/VisualStudioCodeSourceCodeAccess.uplugin
@@ -13,7 +13,7 @@
 	"EnabledByDefault" : true,
 	"CanContainContent" : false,
 	"IsBetaVersion" : false,
-	"Installed" : false,
+	"Installed" : true,
 	"Modules" :
 	[
 		{
diff --git a/Engine/Source/Developer/SourceCodeAccess/Private/SourceCodeAccessModule.cpp b/Engine/Source/Developer/SourceCodeAccess/Private/SourceCodeAccessModule.cpp
index 98cb0b678a05..aca4886a385c 100644
--- a/Engine/Source/Developer/SourceCodeAccess/Private/SourceCodeAccessModule.cpp
+++ b/Engine/Source/Developer/SourceCodeAccess/Private/SourceCodeAccessModule.cpp
@@ -78,7 +78,7 @@ bool FSourceCodeAccessModule::CanCompileSourceCode() const
 {
 #if PLATFORM_WINDOWS
 	// Need to have Visual Studio installed to compile on Windows, regardless of chosen IDE
-	return IsSourceCodeAccessorAvailable("VisualStudio2019") || IsSourceCodeAccessorAvailable("VisualStudio2022");
+	return true;//IsSourceCodeAccessorAvailable("VisualStudio2019") || IsSourceCodeAccessorAvailable("VisualStudio2022");
 #else
 	// Default behavior
 	return CanAccessSourceCode();
diff --git a/Engine/Source/Editor/GameProjectGeneration/Private/SNewClassDialog.cpp b/Engine/Source/Editor/GameProjectGeneration/Private/SNewClassDialog.cpp
index a25c5553daec..710952c59392 100644
--- a/Engine/Source/Editor/GameProjectGeneration/Private/SNewClassDialog.cpp
+++ b/Engine/Source/Editor/GameProjectGeneration/Private/SNewClassDialog.cpp
@@ -992,6 +992,7 @@ FText SNewClassDialog::GetGlobalErrorLabelText() const
 		return FText::Format(LOCTEXT("NoCompilerFoundNewClassLinux", "Your IDE {0} is missing or incorrectly configured, please consider using {1}"),
 			FSourceCodeNavigation::GetSelectedSourceCodeIDE(), FSourceCodeNavigation::GetSuggestedSourceCodeIDE());
 #else
+
 		return FText::Format(LOCTEXT("NoCompilerFoundNewClass", "No compiler was found. In order to use C++ code, you must first install {0}."), FSourceCodeNavigation::GetSuggestedSourceCodeIDE());
 #endif
 	}
diff --git a/Engine/Source/Editor/GameProjectGeneration/Private/SProjectDialog.cpp b/Engine/Source/Editor/GameProjectGeneration/Private/SProjectDialog.cpp
index ae73874df0a2..acf96ab7c552 100644
--- a/Engine/Source/Editor/GameProjectGeneration/Private/SProjectDialog.cpp
+++ b/Engine/Source/Editor/GameProjectGeneration/Private/SProjectDialog.cpp
@@ -1752,6 +1752,7 @@ void SProjectDialog::CreateAndOpenProject()
 		else
 		{
 			OpenCodeIDE(ProjectFile);
+			OpenProject(ProjectFile);
 		}
 	}
 	else
@@ -2043,7 +2044,8 @@ void SProjectDialog::UpdateProjectFileValidity()
 
 					if (IsIDERequired())
 					{
-						LastGlobalValidityErrorText = FText::Format(LOCTEXT("NoCompilerFoundProjectDialog", "No compiler was found. In order to use a C++ template, you must first install {0}."), FSourceCodeNavigation::GetSuggestedSourceCodeIDE());
+						UE_LOG(LogTemp, Warning, TEXT("Test1234!!"));
+						LastGlobalValidityErrorText = FText::Format(LOCTEXT("NoCompilerFoundProjectDialog", "No TEST123 compiler was found. In order to use a C++ template, you must first install {0}."), FSourceCodeNavigation::GetSuggestedSourceCodeIDE());
 					}
 					else
 					{
diff --git a/Engine/Source/Runtime/Launch/Private/LaunchEngineLoop.cpp b/Engine/Source/Runtime/Launch/Private/LaunchEngineLoop.cpp
index 62471dcb8175..1a15cb1330f8 100644
--- a/Engine/Source/Runtime/Launch/Private/LaunchEngineLoop.cpp
+++ b/Engine/Source/Runtime/Launch/Private/LaunchEngineLoop.cpp
@@ -6496,6 +6496,8 @@ bool FEngineLoop::AppInit( )
 			}
 		}
 
+		bNeedCompile = false;
+
 		FEmbeddedCommunication::ForceTick(16);
 		
 		if(bNeedCompile)
diff --git a/Engine/Source/UnrealEditor.Target.cs b/Engine/Source/UnrealEditor.Target.cs
index 5f7cb7bc4a03..5cef7f3dbea3 100644
--- a/Engine/Source/UnrealEditor.Target.cs
+++ b/Engine/Source/UnrealEditor.Target.cs
@@ -11,6 +11,10 @@ public class UnrealEditorTarget : TargetRules
 		IncludeOrderVersion = EngineIncludeOrderVersion.Latest;
 		BuildEnvironment = TargetBuildEnvironment.Shared;
 		bBuildAllModules = true;
+		DisablePlugins.Add("ADOSupport");
+		DisablePlugins.Add("VisualStudioSourceCodeAccess");
+		EnablePlugins.Add("VisualStudioCodeSourceCodeAccess");
+		ExtraModuleNames.Add("VisualStudioCodeSourceCodeAccess");
 		ExtraModuleNames.Add("UnrealGame");
 	}
 }
